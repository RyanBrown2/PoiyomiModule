#T#TokenEmissionProperties

[HideInInspector] m_start_tokenEmission ("Token Emissions--{reference_property:_TokenEmissionEnable}", Float) = 0
[HideInInspector][ThryToggle(_TOKEN_EMISSION)] _TokenEmissionEnable ("Enabled?", Float) = 1
// [HideInInspector] m_start_tokenEmission ("Token Emissions", Float) = 0
[Helpbox(1)] _TokenEmissionHelp("This section has controls for a modified emission system.", Int) = 0

[HideInInspector] g_start_tokenEmission ("", Float) = 0

[HideInInspector] m_start_tokenEmission0 ("Emission 0--{reference_property:_TokenEmission0Enable}", Float) = 0
[HideInInspector][ThryToggle(_TOKEN_EMISSION0)] _TokenEmission0Enable ("Enabled?", Float) = 1
[HideInInspector] g_start_tokenEmission0 ("", Float) = 0

_TokenEmission0Mask ("Emission Mask--{reference_properties:[_TokenEmission0MaskPan, _TokenEmission0MaskUV, _TokenEmission0MaskInvert]}", 2D) = "white" { }
[HideInInspector][Vector2]_TokenEmission0MaskPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0MaskUV ("UV", Int) = 0
[ToggleUI]_TokenEmission0MaskInvert ("Invert", Float) = 0

_TokenEmission0DelayMap ("Delay Map--{reference_properties:[_TokenEmission0DelayMapPan, _TokenEmission0DelayMapUV, _TokenEmission0DelayMapInvert]}", 2D) = "white" { }
[HideInInspector][Vector2]_TokenEmission0DelayMapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0DelayMapUV ("UV", Int) = 0
[ToggleUI]_TokenEmission0DelayMapInvert ("Invert", Float) = 0

// AudioLink Enable
[ThryToggle(_TOKEN_EMISSION0AUDIOLINK)] _TokenEmission0AudioLinkEnabled ("Audio Link--{ condition_showS:_EnableAudioLink==1}", Float) = 0

/*
	Emission 0 - Color Source
*/
[HideInInspector] m_start_tokenEmission0ColorSource("Color Source", Int) = 0
// source selection
[Enum(User Defined, 0, Gradient, 1)]_TokenEmission0ColorSourceNoAL ("Color Source--{condition_show:{type:PROPERTY_BOOL,data:_TokenEmission0AudioLinkEnabled==0},on_value_actions:[
{value:0,actions:[{type:SET_PROPERTY,data:_TokenEmission0ColorSource=1}]},
{value:1,actions:[{type:SET_PROPERTY,data:_TokenEmission0ColorSource=0}]}
]}", Int) = 0 // AudioLink disabled
[Enum(User Defined, 0, Gradient, 1, AudioLink, 2)]_TokenEmission0ColorSourceAL ("Color Source--{condition_show:{type:PROPERTY_BOOL,data:_TokenEmission0AudioLinkEnabled==1},on_value_actions:[
{value:0,actions:[{type:SET_PROPERTY,data:_TokenEmission0ColorSource=0}]},
{value:1,actions:[{type:SET_PROPERTY,data:_TokenEmission0ColorSource=1}]},
{value:2,actions:[{type:SET_PROPERTY,data:_TokenEmission0ColorSource=2}]}
]}", Int) = 0 // AudioLink enabled

// [HideInInspector]_TokenEmission0ColorSource("Selected Color Source", Int) = 0
_TokenEmission0ColorSource("Selected Color Source", Int) = 0

// color gradient
[HideInInspector] g_start_tokenEmission0ColorGradientOptions ("--{condition_show:{type:PROPERTY_BOOL,data:_TokenEmission0ColorSource==1}}", Float) = 0

_TokenEmission0ColorGradientMap("Color Gradient Map--{ reference_properties:[_TokenEmission0ColorGradientMapPan, _TokenEmission0ColorGradientMapUV]}", 2D)= "white" { }
[HideInInspector][Vector2]_TokenEmission0ColorGradientMapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0ColorGradientMapUV ("UV", Int) = 0

[Gradient]_TokenEmission0ColorGradient("Gradient--{reference_properties:[_TokenEmission0ColorGradientPan, _TokenEmission0ColorGradientUV]}", 2D)= "white" { }
[HideInInspector][Vector2]_TokenEmission0ColorGradientPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0ColorGradientUV ("UV", Int) = 0

[HideInInspector] g_end_tokenEmission0ColorGradientOptions ("", Float) = 0

// AudioLink
[HideInInspector] g_start_tokenEmission0ColorAudioLinkSettings ("--{condition_showS:(_TokenEmission0ColorSource==2)}", Float) = 0

[Enum(Bass,0,Low,1,High,2,Treble,3,Map,4)]_TokenEmission0ALBandColor ("AudioLink Band--{ condition_showS:_TokenEmission0AudioLinkEnabled==1}", Int) = 0

[HideInInspector] g_start_TokenEmission0ALBandColorMap ("--{condition_showS:(_TokenEmission0AudioLinkEnabled==1 && _TokenEmission0ALBandColor==4)}", Float) = 0

_TokenEmission0BandColorMap ("Band Map--{reference_properties:[_TokenEmission0BandColorMapPan, _TokenEmission0BandColorMapUV]}", 2D) = "white" {}
[HideInInspector][Vector2]_TokenEmission0BandColorMapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0BandColorMapUV ("UV", Int) = 0

_TokenEmission0BandColorBass ("Bass Color--{reference_property:_TokenEmission0BandColorThemeIndexBass}", Color) = (1, 1, 1, 1)
[HideInInspector][ThryWideEnum(Off, 0, Theme Color 0, 1, Theme Color 1, 2, Theme Color 2, 3, Theme Color 3, 4, ColorChord 0, 5, ColorChord 1, 6, ColorChord 2, 7, ColorChord 3, 8, AL Theme 0, 9, AL Theme 1, 10, AL Theme 2, 11, AL Theme 3, 12)] _TokenEmission0BandColorThemeIndexBass ("", Int) = 0

_TokenEmission0BandColorLow ("Low Color--{reference_property:_TokenEmission0BandColorThemeIndexLow}", Color) = (1, 1, 1, 1)
[HideInInspector][ThryWideEnum(Off, 0, Theme Color 0, 1, Theme Color 1, 2, Theme Color 2, 3, Theme Color 3, 4, ColorChord 0, 5, ColorChord 1, 6, ColorChord 2, 7, ColorChord 3, 8, AL Theme 0, 9, AL Theme 1, 10, AL Theme 2, 11, AL Theme 3, 12)] _TokenEmission0BandColorThemeIndexLow ("", Int) = 0

_TokenEmission0BandColorHigh ("High Color--{reference_property:_TokenEmission0BandColorThemeIndexHigh}", Color) = (1, 1, 1, 1)
[HideInInspector][ThryWideEnum(Off, 0, Theme Color 0, 1, Theme Color 1, 2, Theme Color 2, 3, Theme Color 3, 4, ColorChord 0, 5, ColorChord 1, 6, ColorChord 2, 7, ColorChord 3, 8, AL Theme 0, 9, AL Theme 1, 10, AL Theme 2, 11, AL Theme 3, 12)] _TokenEmission0BandColorThemeIndexHigh ("", Int) = 0

_TokenEmission0BandColorTreble ("Treble Color--{reference_property:_TokenEmission0BandColorThemeIndexTreble}", Color) = (1, 1, 1, 1)
[HideInInspector][ThryWideEnum(Off, 0, Theme Color 0, 1, Theme Color 1, 2, Theme Color 2, 3, Theme Color 3, 4, ColorChord 0, 5, ColorChord 1, 6, ColorChord 2, 7, ColorChord 3, 8, AL Theme 0, 9, AL Theme 1, 10, AL Theme 2, 11, AL Theme 3, 12)] _TokenEmission0BandColorThemeIndexTreble ("", Int) = 0

[HideInInspector] g_end_TokenEmission0ALBandColorMap ("", Float) = 0
[HideInInspector] g_end_tokenEmission0ColorAudioLinkSettings ("", Float) = 0

// User Defined Color Source
[HideInInspector] g_start_tokenEmission0UserDefinedColor("--{condition_showS:(_TokenEmission0ColorSource==0 || (_TokenEmission0ColorSource==2 && _TokenEmission0ALBandColor!=4))}", Float) = 0
_TokenEmission0Color ("Emission Color--{reference_property:_TokenEmission0ColorThemeIndex}", Color) = (1, 1, 1, 1)
[HideInInspector][ThryWideEnum(Off, 0, Theme Color 0, 1, Theme Color 1, 2, Theme Color 2, 3, Theme Color 3, 4, ColorChord 0, 5, ColorChord 1, 6, ColorChord 2, 7, ColorChord 3, 8, AL Theme 0, 9, AL Theme 1, 10, AL Theme 2, 11, AL Theme 3, 12, Color Shift, 13)] _TokenEmission0ColorThemeIndex ("", Int) = 0
[HideInInspector] g_end_tokenEmission0UserDefinedColor("", Float) = 0

[HideInInspector] m_end_tokenEmission0ColorSource("", Int) = 0

/*
	Emission 0 - Intensity Source
*/
[HideInInspector] m_start_tokenEmission0IntensitySource("Intensity Source", Float) = 0
_TokenEmission0IntensityMultiplier("Multiplier", Range(0, 5)) = 1
// source selection
[Enum(User Defined, 0, Curve, 1)]_TokenEmission0IntensitySourceNoAL ("Color Source--{condition_show:{type:PROPERTY_BOOL,data:_TokenEmission0AudioLinkEnabled==0},on_value_actions:[
{value:0,actions:[{type:SET_PROPERTY,data:_TokenEmission0IntensitySource=1}]},
{value:1,actions:[{type:SET_PROPERTY,data:_TokenEmission0IntensitySource=0}]}
]}", Int) = 0 // AudioLink disabled
[Enum(User Defined, 0, Curve, 1, AudioLink, 2)]_TokenEmission0IntensitySourceAL ("Color Source--{condition_show:{type:PROPERTY_BOOL,data:_TokenEmission0AudioLinkEnabled==1},on_value_actions:[
{value:0,actions:[{type:SET_PROPERTY,data:_TokenEmission0IntensitySource=0}]},
{value:1,actions:[{type:SET_PROPERTY,data:_TokenEmission0IntensitySource=1}]},
{value:2,actions:[{type:SET_PROPERTY,data:_TokenEmission0IntensitySource=2}]}
]}", Int) = 0 // AudioLink enabled

_TokenEmission0IntensitySource("Selected Intensity Source", Int) = 0

/*
	Emission 0 - Intensity Curve
*/
[HideInInspector] g_start_tokenEmission0IntensityCurveOptions("--{condition_showS:(_TokenEmission0IntensitySource==1)}", Float) = 0

_TokenEmission0IntensityCurveMap("Intensity Curve Map--{ reference_properties:[_TokenEmission0IntensityCurveMapPan, _TokenEmission0IntensityCurveMapUV]}", 2D)= "white" { }
[HideInInspector][Vector2]_TokenEmission0IntensityCurveMapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0IntensityCurveMapUV ("UV", Int) = 0

[Curve]_TokenEmission0IntensityCurve("Intensity Curve--{reference_properties:[_TokenEmission0IntensityCurvePan, _TokenEmission0IntensityCurveUV]}", 2D) = "white" {}
[HideInInspector][Vector2]_TokenEmission0IntensityCurvePan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0IntensityCurveUV ("UV", Int) = 0

[HideInInspector] g_end_tokenEMission0IntensityCurveOptions("", Float) = 0

// AudioLink
[HideInInspector] g_start_tokenEmission0IntensityAudioLinkSettings("--{condition_showS:(_TokenEmission0IntensitySource==2)}", Float) = 0

[Enum(Bass,0,Low,1,High,2,Treble,3,Map,4)]_TokenEmission0ALBandIntensity ("AudioLink Band--{ condition_showS:_TokenEmission0AudioLinkEnabled==1}", Int) = 0

[HideInInspector] g_start_TokenEmission0ALBandIntensityCurve ("--{condition_showS:(_TokenEmission0AudioLinkEnabled==1 && _TokenEmission0ALBandIntensity==4)}", Float) = 0

_TokenEmission0BandIntensityMap ("Band Map--{reference_properties:[_TokenEmission0BandIntensityMapPan, _TokenEmission0BandIntensityMapUV]}", 2D) = "white" {}
[HideInInspector][Vector2]_TokenEmission0BandIntensityMapPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0BandIntensityMapUV ("UV", Int) = 0

// _TokenEmission0BandIntensityBass ("Bass Intensity", Range(0,1)) = 1
// _TokenEmission0BandIntensityLow ("Low Intensity", Range(0,1)) = 1
// _TokenEmission0BandIntensityHigh ("High Intensity", Range(0,1)) = 1
// _TokenEmission0BandIntensityTreble ("Treble Intensity", Range(0,1)) = 1

[Curve]_TokenEmission0BandIntensityCurveBass ("Bass Intensity--{reference_properties:[_TokenEmission0BandIntensityCurveBassPan, _TokenEmission0BandIntensityCurveBassUV]}", 2D) = "white" {}
[HideInInspector][Vector2]_TokenEmission0BandIntensityCurveBassPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0BandIntensityCurveBassUV ("UV", Int) = 0

[Curve]_TokenEmission0BandIntensityCurveLow ("Low Intensity--{reference_properties:[_TokenEmission0BandIntensityCurveLowPan, _TokenEmission0BandIntensityCurveLowUV]}", 2D) = "white" {}
[HideInInspector][Vector2]_TokenEmission0BandIntensityCurveLowPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0BandIntensityCurveLowUV ("UV", Int) = 0

[Curve]_TokenEmission0BandIntensityCurveHigh ("High Intensity--{reference_properties:[_TokenEmission0BandIntensityCurveHighPan, _TokenEmission0BandIntensityCurveHighUV]}", 2D) = "white" {}
[HideInInspector][Vector2]_TokenEmission0BandIntensityCurveHighPan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0BandIntensityCurveHighUV ("UV", Int) = 0

[Curve]_TokenEmission0BandIntensityCurveTreble ("Treble Intensity--{reference_properties:[_TokenEmission0BandIntensityCurveTreblePan, _TokenEmission0BandIntensityCurveTrebleUV]}", 2D) = "white" {}
[HideInInspector][Vector2]_TokenEmission0BandIntensityCurveTreblePan ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmission0BandIntensityCurveTrebleUV ("UV", Int) = 0

[HideInInspector] g_end_TokenEmission0ALBandIntensityCurve ("", Float) = 0
[HideInInspector] g_end_tokenEmission0IntensityAudioLinkSettings("", Float) = 0

// User Defined Intensity
// [HideInInspector] g_start_TokenEmission0UserDefinedIntensity("--{condition_showS:(_TokenEmission0IntensitySource==0 || (_TokenEmission0IntensitySource==2 && _TokenEmission0ALBandIntensity!=4))}", Float) = 0
[HideInInspector] g_start_TokenEmission0UserDefinedIntensity("--{condition_showS:(_TokenEmission0IntensitySource!=2 || (_TokenEmission0IntensitySource==2 && _TokenEmission0ALBandIntensity!=4))}", Float) = 0
// [HideInInspector] g_start_TokenEmission0UserDefinedIntensity("", Float) = 0
_TokenEmission0Intensity ("Intensity", Range(0, 1)) = 1
[HideInInspector] g_end_TokenEmission0UserDefinedIntensity("", Float) = 0

[HideInInspector] m_end_tokenEmission0IntensitySource("", Float) = 0

[HideInInspector] g_end_tokenEmission0 ("", Float) = 0
[HideInInspector] m_end_tokenEmission0 ("", Float) = 0


[HideInInspector] g_end_tokenEmission ("", Float) = 0

[HideInInspector] m_end_tokenEmission ("Token Emissions", Float) = 0

#T#TokenEmissionKeywords
#pragma shader_feature _TOKEN_EMISSION
#pragma shader_feature _TOKEN_EMISSION0
#pragma shader_feature _TOKEN_EMISSION0AUDIOLINK

#T#TokenEmissionVariables
/*
Texture2D ;
float4 _ST;
float2 Pan;
float UV;
*/
#ifdef _TOKEN_EMISSION

	SamplerState token_linear_mirror_sampler;

#ifdef _TOKEN_EMISSION0
	// emission 0 - mask
	#if defined(PROP_TOKENEMISSION0MASK) || !defined(OPTIMIZER_ENABLED)
		Texture2D _TokenEmission0Mask;
	#endif
	float4 _TokenEmission0Mask_ST;
	float2 _TokenEmission0MaskPan;
	float _TokenEmission0MaskUV;
	float _TokenEmission0MaskInvert;

	// emission 0 - delay map
	#if defined(PROP_TOKENEMISSION0DELAYMAP) || !defined(OPTIMIZER_ENABLED)
		Texture2D _TokenEmission0DelayMap;
	#endif
	float4 _TokenEmission0DelayMap_ST;
	float2 _TokenEmission0DelayMapPan;
	float _TokenEmission0DelayMapUV;
	float _TokenEmission0DelayMapInvert;

	// emission 0 - AudioLink Enable
	float _TokenEmission0AudioLinkEnabled;
	
	/*
		Emission 0 - Color Source
	*/	

	// Emission 0 - Color Source Selection
	float _TokenEmission0ColorSource;

	/*
		Emission 0 - User Defined Color
	*/
	float4 _TokenEmission0Color;
	float _TokenEmission0ColorThemeIndex;

	/*
		Emission 0 - Gradient Color
	*/
	#if defined(PROP_TOKENEMISSION0COLORGRADIENTMAP) || !defined(OPTIMIZER_ENABLED)
		Texture2D _TokenEmission0ColorGradientMap;
	#endif
	float4 _TokenEmission0ColorGradientMap_ST;
	float2 _TokenEmission0ColorGradientMapPan;
	float _TokenEmission0ColorGradientMapUV;

	#if defined(PROP_TOKENEMISSION0COLORGRADIENT) || !defined(OPTIMIZER_ENABLED)
		Texture2D _TokenEmission0ColorGradient;
	#endif
	float4 _TokenEmission0ColorGradient_ST;
	float4 _TokenEmission0ColorGradient_TexelSize;
	float2 _TokenEmission0ColorGradientPan;
	float _TokenEmission0ColorGradientUV;

	/*
		Emission - AudioLink Color
	*/
	#ifdef _TOKEN_EMISSION0AUDIOLINK

		float _TokenEmission0ALBandColor;

		#if defined(PROP_TOKENEMISSION0BANDCOLORMAP) || !defined(OPTIMIZER_ENABLED)
			Texture2D _TokenEmission0BandColorMap;
		#endif
		float4 _TokenEmission0BandColorMap_ST;
		float2 _TokenEmission0BandColorMapPan;
		float _TokenEmission0BandColorMapUV;

		float4 _TokenEmission0BandColorBass;
		float _TokenEmission0BandColorThemeIndexBass;

		float4 _TokenEmission0BandColorLow;
		float _TokenEmission0BandColorThemeIndexLow;

		float4 _TokenEmission0BandColorHigh;
		float _TokenEmission0BandColorThemeIndexHigh;

		float4 _TokenEmission0BandColorTreble;
		float _TokenEmission0BandColorThemeIndexTreble;

	#endif

	/*
		Emission 0 - Intensity Source
	*/

	// Emission 0 - Intensity Multiplier
	float _TokenEmission0IntensityMultiplier;

	// Emission 0 - Intensity Source Selection
	float _TokenEmission0IntensitySource;

	/*
		Emission 0 - User Defined Intensity
	*/
	float _TokenEmission0Intensity;

	/*
		Emission 0 - Curve Source
	*/
	#if defined(PROP_TOKENEMISSION0INTENSITYCURVEMAP) || !defined(OPTIMIZER_ENABLED)
		Texture2D _TokenEmission0IntensityCurveMap;
	#endif
	float4 _TokenEmission0IntensityCurveMap_ST;
	float2 _TokenEmission0IntensityCurveMapPan;
	float _TokenEmission0IntensityCurveMapUV;

	#if defined(PROP_TOKENEMISSION0INTENSITYCURVE) || !defined(OPTIMIZER_ENABLED)
		Texture2D _TokenEmission0IntensityCurve;
	#endif
	float4 _TokenEmission0IntensityCurve_ST;
	float2 _TokenEmission0IntensityCurvePan;
	float _TokenEmission0IntensityCurveUV;

	/*
		Emission 0 - AudioLink Intensity
	*/
	#ifdef _TOKEN_EMISSION0AUDIOLINK

		float _TokenEmission0ALBandIntensity;

		#if defined(PROP_TOKENEMISSION0BANDINTENSITYMAP) || !defined(OPTIMIZER_ENABLED)
			Texture2D _TokenEmission0BandIntensityMap;
		#endif
		float4 _TokenEmission0BandIntensityMap_ST;
		float2 _TokenEmission0BandIntensityMapPan;
		float _TokenEmission0BandIntensityMapUV;

		#if defined(PROP_TOKENEMISSION0BANDINTENSITYCURVEBASS) || !defined(OPTIMIZER_ENABLED)
			Texture2D _TokenEmission0BandIntensityCurveBass;
		#endif
		float4 _TokenEmission0BandIntensityCurveBass_ST;
		float2 _TokenEmission0BandIntensityCurveBassPan;
		float _TokenEmission0BandIntensityCurveBassUV;

		#if defined(PROP_TOKENEMISSION0BANDINTENSITYCURVELOW) || !defined(OPTIMIZER_ENABLED)
			Texture2D _TokenEmission0BandIntensityCurveLow;
		#endif
		float4 _TokenEmission0BandIntensityCurveLow_ST;
		float2 _TokenEmission0BandIntensityCurveLowPan;
		float _TokenEmission0BandIntensityCurveLowUV;

		#if defined(PROP_TOKENEMISSION0BANDINTENSITYCURVEHIGH) || !defined(OPTIMIZER_ENABLED)
			Texture2D _TokenEmission0BandIntensityCurveHigh;
		#endif
		float4 _TokenEmission0BandIntensityCurveHigh_ST;
		float2 _TokenEmission0BandIntensityCurveHighPan;
		float _TokenEmission0BandIntensityCurveHighUV;
		
		#if defined(PROP_TOKENEMISSION0BANDINTENSITYCURVETREBLE) || !defined(OPTIMIZER_ENABLED)
			Texture2D _TokenEmission0BandIntensityCurveTreble;
		#endif
		float4 _TokenEmission0BandIntensityCurveTreble_ST;
		float2 _TokenEmission0BandIntensityCurveTreblePan;
		float _TokenEmission0BandIntensityCurveTrebleUV;
		
		// float _TokenEmission0BandIntensityBass;
		// float _TokenEmission0BandIntensityLow;
		// float _TokenEmission0BandIntensityHigh;
		// float _TokenEmission0BandIntensityTreble;

	#endif

#endif
#endif

#T#TokenEmissionFragDataVariables
struct TokenEmissionALData {
	float bandBrightness[4];
	float3 bandColor[4];
	float3 color;
	float maxBrightness;
	float3 finalColor;
};

struct TokenEmissionData {
	// color
	float colorSource;
	float3 color; // if using AudioLink Map or gradient for color source then don't use this
	float3 bandColor[4];
	float colorBand; // only used for AudioLink

	// intensity
	float intensitySource;
	float intensity; // if using AudioLink Map for intensity source then don't use this
	float bandIntensity[4];
	float intensityBand; // only used for AudioLink
};

#T#TokenEmissionFunctions
#ifdef _TOKEN_EMISSION
	
	float4 tokenEmissionAudioLinkBandIntensity(in PoiMods poiMods, in float delay)
	{
		float bassBrightness = AudioLinkData(float2(delay, 0)) * poiMods.audioLinkAvailable;
		float lowBrightness = AudioLinkData(float2(delay, 1)) * poiMods.audioLinkAvailable;
		float highBrightness = AudioLinkData(float2(delay, 2)) * poiMods.audioLinkAvailable;
		float trebleBrightness = AudioLinkData(float2(delay, 3)) * poiMods.audioLinkAvailable;
		return float4(bassBrightness, lowBrightness, highBrightness, trebleBrightness);
	}

#ifdef _TOKEN_EMISSION0

	#ifdef _TOKEN_EMISSION0AUDIOLINK

	void tokenEmission0AudioLinkBandColors(in PoiMods poiMods, inout TokenEmissionALData emissionData)
	{
		emissionData.bandColor[0] = poiThemeColor(poiMods, _TokenEmission0BandColorBass.rgb, _TokenEmission0BandColorThemeIndexBass);
		emissionData.bandColor[1] = poiThemeColor(poiMods, _TokenEmission0BandColorLow.rgb, _TokenEmission0BandColorThemeIndexLow);
		emissionData.bandColor[2] = poiThemeColor(poiMods, _TokenEmission0BandColorHigh.rgb, _TokenEmission0BandColorThemeIndexHigh);
		emissionData.bandColor[3] = poiThemeColor(poiMods, _TokenEmission0BandColorTreble.rgb, _TokenEmission0BandColorThemeIndexTreble);
	}

	#endif

	void tokenEmission0InitData(in PoiMesh poiMesh, in PoiMods poiMods, inout TokenEmissionData emissionData)
	{
		PoiInitStruct(TokenEmissionData, emissionData);

		emissionData.colorSource = _TokenEmission0ColorSource;
		emissionData.intensitySource = _TokenEmission0IntensitySource;

		switch(emissionData.colorSource)
		{
			case 0: // user set
			{
				emissionData.color = poiThemeColor(poiMods, _TokenEmission0Color.rgb, _TokenEmission0ColorThemeIndex);
				break;
			}
			case 1: // gradient
			{	
				float gradientPos = 0;
				#if defined(PROP_TOKENEMISSION0COLORGRADIENTMAP) || !defined(OPTIMIZER_ENABLED)
					// float2 uv_gradientMap = poiMesh.uv[0].xy * _TokenEmission0ColorGradientMap_ST.xy + _TokenEmission0ColorGradientMap_ST;
					float2 uv_gradientMap = poiMesh.uv[0].xy;
					gradientPos = _TokenEmission0ColorGradientMap.Sample(token_linear_mirror_sampler, uv_gradientMap);

					float2 dx = ddx(uv_gradientMap);
					float2 dy = ddy(uv_gradientMap);
					// gradientPos = _TokenEmission0ColorGradientMap.SampleGrad(token_linear_mirror_sampler, uv_gradientMap, dx, dy);
					
				#endif

				float3 gradientColor = 0;
				#if defined(PROP_TOKENEMISSION0COLORGRADIENT) || !defined(OPTIMIZER_ENABLED)
					float2 uv_temp = poiMesh.uv[0].xy * _TokenEmission0ColorGradientMap_ST.xy + _TokenEmission0ColorGradientMap_ST.zw;
					gradientColor = _TokenEmission0ColorGradient.Sample(token_linear_mirror_sampler, float2(gradientPos, 0));
					// gradientColor = UNITY_SAMPLE_TEX2D_SAMPLER(_TokenEmission0ColorGradient, _MainTex, float2(gradientPos, 0));
				#endif
				// emissionData.color = gradientPos;
				emissionData.color = gradientColor;
				break; // TODO
			}
			case 2: // AudioLink
			{
				emissionData.colorBand = _TokenEmission0ALBandColor;
				if (_TokenEmission0ALBandColor == 4)
				{

					float4 bandMap = float4(1.0, 1.0, 1.0, 1.0);
					#if defined(PROP_TOKENEMISSION0BANDCOLORMAP) || !defined(OPTIMIZER_ENABLED)
						float2 uv_bandMap = poiMesh.uv[0].xy * _TokenEmission0BandColorMap_ST.xy + _TokenEmission0BandColorMap_ST.zw;
						bandMap = UNITY_SAMPLE_TEX2D_SAMPLER(_TokenEmission0BandColorMap, _MainTex, uv_bandMap);
					#endif
					emissionData.bandColor[0] = poiThemeColor(poiMods, _TokenEmission0BandColorBass.rgb, _TokenEmission0BandColorThemeIndexBass) * bandMap.r;
					emissionData.bandColor[1] = poiThemeColor(poiMods, _TokenEmission0BandColorLow.rgb, _TokenEmission0BandColorThemeIndexLow) * bandMap.g;
					emissionData.bandColor[2] = poiThemeColor(poiMods, _TokenEmission0BandColorHigh.rgb, _TokenEmission0BandColorThemeIndexHigh) * bandMap.b;
					emissionData.bandColor[3] = poiThemeColor(poiMods, _TokenEmission0BandColorTreble.rgb, _TokenEmission0BandColorThemeIndexTreble) * (1.0 - bandMap.a);
				} else {
					emissionData.color = poiThemeColor(poiMods, _TokenEmission0Color.rgb, _TokenEmission0ColorThemeIndex);
					emissionData.colorBand = _TokenEmission0ALBandColor;
				}
				break;
			}
		}

		switch(emissionData.intensitySource)
		{
			case 0: // user defined
			{
				emissionData.intensity = _TokenEmission0Intensity * _TokenEmission0IntensityMultiplier;
				break;
			}
			case 1: // curve
			{
				emissionData.intensity = _TokenEmission0Intensity * _TokenEmission0IntensityMultiplier;
				break; // TODO
			}
			case 2: // AudioLink
			{
				emissionData.intensityBand = _TokenEmission0ALBandIntensity;
				if (_TokenEmission0ALBandIntensity == 4)
				{
					float4 bandMap = float4(1.0, 1.0, 1.0, 1.0);
					#if defined(PROP_TOKENEMISSION0INTENSITYBANDMAP) || !defined(OPTIMIZER_ENABLED)
						float2 uv_bandMap = poiMesh.uv[0].xy * _TokenEmission0BandIntensityMap_ST.xy + _TokenEmission0BandIntensityMap_ST.zw;
						bandMap = UNITY_SAMPLE_TEX2D_SAMPLER(_TokenEmission0BandIntensityMap, _MainTex, uv_bandMap);
					#endif

					

					emissionData.bandIntensity[0] = bandMap.r * _TokenEmission0IntensityMultiplier;
					emissionData.bandIntensity[1] = bandMap.g * _TokenEmission0IntensityMultiplier;
					emissionData.bandIntensity[2] = bandMap.b * _TokenEmission0IntensityMultiplier;
					emissionData.bandIntensity[3] = (1.0 - bandMap.a) * _TokenEmission0IntensityMultiplier;

					// emissionData.bandIntensity[0] = _TokenEmission0BandIntensityBass * bassCurve * _TokenEmission0IntensityMultiplier;
					// emissionData.bandIntensity[1] = _TokenEmission0BandIntensityLow * lowCurve * _TokenEmission0IntensityMultiplier;
					// emissionData.bandIntensity[2] = _TokenEmission0BandIntensityHigh * highCurve * _TokenEmission0IntensityMultiplier;
					// emissionData.bandIntensity[3] = _TokenEmission0BandIntensityTreble * trebleCurve * _TokenEmission0IntensityMultiplier;

					// emissionData.bandIntensity[0] = _TokenEmission0BandIntensityBass * bandMap.r * _TokenEmission0IntensityMultiplier;
					// emissionData.bandIntensity[1] = _TokenEmission0BandIntensityLow * bandMap.g * _TokenEmission0IntensityMultiplier;
					// emissionData.bandIntensity[2] = _TokenEmission0BandIntensityHigh * bandMap.b * _TokenEmission0IntensityMultiplier;
					// emissionData.bandIntensity[3] = _TokenEmission0BandIntensityTreble * (1.0 - bandMap.a) * _TokenEmission0IntensityMultiplier;
				} else {
					emissionData.intensity = _TokenEmission0Intensity;
					emissionData.intensityBand = _TokenEmission0ALBandIntensity;
				}
				break;
			}
		}

	}

	void tokenEmission0CalcIntensity(in PoiMesh poiMesh, in PoiMods poiMods, inout TokenEmissionData emissionData, in float delay)
	{
		switch(emissionData.intensitySource)
		{
			case 0: // user defined
			{
				break;
			}
			case 1: // curve
			{
				float mapWeight = 1;
				#if defined(PROP_TOKENEMISSION0INTENSITYCURVEMAP) || !defined(OPTIMIZER_ENABLED)
					float2 uv_map = poiMesh.uv[0].xy * _TokenEmission0IntensityCurveMap_ST.xy + _TokenEmission0IntensityCurveMap_ST.zw;
					mapWeight = UNITY_SAMPLE_TEX2D_SAMPLER(_TokenEmission0IntensityCurveMap, _MainTex, uv_map);
				#endif


				float curveValue = 1;
				#if defined(PROP_TOKENEMISSION0INTENSITYCURVE) || !defined(OPTIMIZER_ENABLED)
					curveValue = UNITY_SAMPLE_TEX2D_SAMPLER(_TokenEmission0IntensityCurve, _MainTex, float2(mapWeight, mapWeight));
				#endif

				emissionData.intensity = curveValue;
				break;
			}
			case 2: // AudioLink
			{
				if (_TokenEmission0ALBandIntensity == 4)
				{
					float4 audioLinkBandData = tokenEmissionAudioLinkBandIntensity(poiMods, delay);
					float bassCurve = 1;
					#if defined(PROP_TOKENEMISSION0BANDINTENSITYCURVEBASS) || !defined(OPTIMIZER_ENABLED)
						bassCurve = UNITY_SAMPLE_TEX2D_SAMPLER(_TokenEmission0BandIntensityCurveBass, _MainTex, float2(audioLinkBandData.x, 1));
					#endif

					float lowCurve = 1;
					#if defined(PROP_TOKENEMISSION0BANDINTENSITYCURVELOW) || !defined(OPTIMIZER_ENABLED)
						lowCurve = UNITY_SAMPLE_TEX2D_SAMPLER(_TokenEmission0BandIntensityCurveLow, _MainTex, float2(audioLinkBandData.y, 1));
					#endif

					float highCurve = 1;
					#if defined(PROP_TOKENEMISSION0BANDINTENSITYCURVEHIGH) || !defined(OPTIMIZER_ENABLED)
						highCurve = UNITY_SAMPLE_TEX2D_SAMPLER(_TokenEmission0BandIntensityCurveHigh, _MainTex, float2(audioLinkBandData.z, 1));
					#endif

					float trebleCurve = 1;
					#if defined(PROP_TOKENEMISSION0BANDINTENSITYCURVETREBLE) || !defined(OPTIMIZER_ENABLED)
						trebleCurve = UNITY_SAMPLE_TEX2D_SAMPLER(_TokenEmission0BandIntensityCurveTreble, _MainTex, float2(audioLinkBandData.a, 1));
					#endif
					emissionData.bandIntensity[0] *= bassCurve;
					emissionData.bandIntensity[1] *= lowCurve;
					emissionData.bandIntensity[2] *= highCurve;
					emissionData.bandIntensity[3] *= trebleCurve;
					emissionData.intensity = ( emissionData.bandIntensity[0] + emissionData.bandIntensity[1] + emissionData.bandIntensity[2] + emissionData.bandIntensity[3]);
				} else {
					emissionData.intensity *= AudioLinkData(float2(delay, emissionData.intensityBand)) * poiMods.audioLinkAvailable;
				}
				break;
			}
		}
	}
	
	void tokenEmission0CalcColor(in PoiMods poiMods, inout TokenEmissionData emissionData)
	{
		switch(emissionData.colorSource)
		{
			case 0: // user set
			{
				// if (emissionData.intensitySource==2 && emissionData.intensityBand==4) {

				// }
				emissionData.color *= emissionData.intensity;
				break;
			}
			case 1: // gradient
			{
				emissionData.color *= emissionData.intensity;
				break; // TODO
			}
			case 2: // AudioLink
			{
				if (_TokenEmission0ALBandColor == 4)
				{
					if (emissionData.intensityBand==4)
					{
						emissionData.bandColor[0] *= emissionData.bandIntensity[0];
						emissionData.bandColor[1] *= emissionData.bandIntensity[1];
						emissionData.bandColor[2] *= emissionData.bandIntensity[2];
						emissionData.bandColor[3] *= emissionData.bandIntensity[3];
						emissionData.color = emissionData.bandColor[0] + emissionData.bandColor[1] + emissionData.bandColor[2] + emissionData.bandColor[3];
					} else {
						emissionData.bandColor[0] *= emissionData.intensity;
						emissionData.bandColor[1] *= emissionData.intensity;
						emissionData.bandColor[2] *= emissionData.intensity;
						emissionData.bandColor[3] *= emissionData.intensity;
						emissionData.color = emissionData.bandColor[0] + emissionData.bandColor[1] + emissionData.bandColor[2] + emissionData.bandColor[3];
					}
				} else {
					emissionData.color *= emissionData.intensity;
				}
				break;
			}
		}
	}

	float3 applyTokenEmission0(inout PoiFragData poiFragData, in PoiMesh poiMesh, in PoiLight poiLight, in PoiCam poiCam, in PoiMods poiMods)
	{
		float3 emission = 0;
		
		float colorSource = _TokenEmission0ColorSource;
		float intensitySource = _TokenEmission0IntensitySource;
		
		// delay mapping
		float delay = 0;
		#if defined(PROP_TOKENEMISSION0DELAYMAP) || !defined(OPTIMIZER_ENABLED)
			float2 uv_DelayMap = poiMesh.uv[0].xy * _TokenEmission0DelayMap_ST.xy + _TokenEmission0DelayMap_ST.zw;
			if (_TokenEmission0DelayMapInvert) {
				delay = min(( 1 - (UNITY_SAMPLE_TEX2D_SAMPLER(_TokenEmission0DelayMap, _MainTex, uv_DelayMap)).r) * ( 128.0 ) , 127.999 );
			} else {
				delay = min( (UNITY_SAMPLE_TEX2D_SAMPLER(_TokenEmission0DelayMap, _MainTex, uv_DelayMap)).r * ( 128.0 ) , 127.999 );
			}
		#endif
		
		TokenEmissionData emissionData;
		tokenEmission0InitData(poiMesh, poiMods, emissionData);
		tokenEmission0CalcIntensity(poiMesh, poiMods, emissionData, delay);
		tokenEmission0CalcColor(poiMods, emissionData);

		return emissionData.color;
	}
#endif
#endif

#T#TokenEmissionFunctionCalls
#ifdef _TOKEN_EMISSION
	float3 tokenEmissionBaseReplace = 0;
	#ifdef _TOKEN_EMISSION0
	tokenEmissionBaseReplace += applyTokenEmission0(poiFragData, poiMesh, poiLight, poiCam, poiMods);
	#endif
	poiFragData.finalColor.rgb = lerp(poiFragData.finalColor.rgb, saturate(tokenEmissionBaseReplace), poiMax(tokenEmissionBaseReplace));
#endif

