#T#TokenEmissionProperties

[HideInInspector] m_start_tokenEmission ("Token Emissions--{reference_property:_TokenEmissionEnable}", Float) = 0
[HideInInspector][ThryToggle(_TOKEN_EMISSION)] _TokenEmissionEnable ("Enabled?", Float) = 1
[Helpbox(1)] _TokenEmissionHelp("This section has controls for a modified emission system.", Int) = 0

[HideInInspector] g_start_tokenEmission ("--{condition_show:{type:PROPERTY_BOOL,data:_TokenEmissionEnable}}", Float) = 0

[HideInInspector] m_start_tokenEmission0 ("Emission 0--{reference_property:_TokenEmissionEnable0}", Float) = 0
[HideInInspector][ThryToggle(_TOKEN_EMISSION0)] _TokenEmissionEnable0 ("Enabled?", Float) = 1
[HideInInspector] g_start_tokenEmission0 ("--{condition_show:{type:PROPERTY_BOOL,data:_TokenEmissionEnable0}}", Float) = 0

_TokenEmissionMask0 ("Emission Mask--{reference_properties:[_TokenEmissionMaskPan0, _TokenEmissionMaskUV0, _TokenEmissionMaskInvert0]}", 2D) = "white" { }
[HideInInspector][Vector2]_TokenEmissionMaskPan0 ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmissionMaskUV0 ("UV", Int) = 0
[ToggleUI]_TokenEmissionMaskInvert0 ("Invert", Float) = 0
_TokenEmissionStrength0 ("Emission Strength", Range(0, 20)) = 0

_TokenEmissionDelayMap0 ("Delay Map--{reference_properties:[_TokenEmissionDelayMapPan0, _TokenEmissionDelayMapUV0, _TokenEmissionDelayMapInvert0]}", 2D) = "white" { }
[HideInInspector][Vector2]_TokenEmissionDelayMapPan0 ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmissionDelayMapUV0 ("UV", Int) = 0
[ToggleUI]_TokenEmissionDelayMapInvert0 ("Invert", Float) = 0


[HDR]_TokenEmissionColor0 ("Emission Color--{reference_property:_TokenEmissionColorThemeIndex0}", Color) = (1, 1, 1, 1)
[HideInInspector][ThryWideEnum(Off, 0, Theme Color 0, 1, Theme Color 1, 2, Theme Color 2, 3, Theme Color 3, 4, ColorChord 0, 5, ColorChord 1, 6, ColorChord 2, 7, ColorChord 3, 8, AL Theme 0, 9, AL Theme 1, 10, AL Theme 2, 11, AL Theme 3, 12)] _TokenEmissionColorThemeIndex0 ("", Int) = 0

[ThryToggle(true)] _TokenEmissionAudioLinkEnabled0 ("Audio Link--{ condition_showS:_EnableAudioLink==1}", Float) = 0
_TokenEmissionALBand0 ("AudioLink Band--{ condition_showS:_TokenEmissionAudioLinkEnabled0==1}", Range(0,3)) = 0

[ToggleUI]_TokenEmissionEnableColorShift0 ("Enable Color Shift", Float) = 0

[HideInInspector] g_start_tokenEmissionColorShiftOptions0 ("--{condition_show:{type:PROPERTY_BOOL,data:_TokenEmissionEnableColorShift0}}", Float) = 0

_TokenEmissionColorShiftMap0("Color Shift Map--{ reference_properties:[_TokenEmissionColorShiftMapPan0, _TokenEmissionColorShiftMapUV0]}", 2D)= "white" { }
[HideInInspector][Vector2]_TokenEmissionColorShiftMapPan0 ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmissionColorShiftMapUV0 ("UV", Int) = 0

[Space(2)]
[Gradient]_TokenEmissionColorShiftGradient0("Gradient--{reference_properties:[_TokenEmissionColorShiftGradientPan0, _TokenEmissionColorShiftGradientUV0]}", 2D)= "white" { }
[HideInInspector][Vector2]_TokenEmissionColorShiftGradientPan0 ("Panning", Vector) = (0, 0, 0, 0)
[HideInInspector][ThryWideEnum(UV0, 0, UV1, 1, UV2, 2, UV3, 3, Panosphere, 4, World Pos XZ, 5, Polar UV, 6, Distorted UV, 7)] _TokenEmissionColorShiftGradientUV0 ("UV", Int) = 0

[HideInInspector] g_end_tokenEmissionColorShiftOptions0 ("", Float) = 0

[HideInInspector] g_end_tokenEmission0 ("", Float) = 0
[HideInInspector] m_end_tokenEmission0 ("", Float) = 0


[HideInInspector] g_end_tokenEmission ("", Float) = 0

[HideInInspector] m_end_tokenEmission ("Token Emissions", Float) = 0

#T#TokenEmissionKeywords
#pragma shader_feature _TOKEN_EMISSION
#pragma shader_feature _TOKEN_EMISSION0

#T#TokenEmissionVariables
/*
Texture2D ;
float4 _ST;
float2 Pan;
float UV;
*/
#ifdef _TOKEN_EMISSION
#ifdef _TOKEN_EMISSION0
	#if defined(PROP_TOKENEMISSIONMASK0) || !defined(OPTIMIZER_ENABLED)
		sampler2D _TokenEmissionMask0;
	#endif
	float4 _TokenEmissionMask0_ST;
	float2 _TokenEmissionMaskPan0;
	float _TokenEmissionMaskUV0;
	float _TokenEmissionMaskInvert0;

	float _TokenEmissionStrength0;

	#if defined(PROP_TOKENEMISSIONDELAYMAP0) || !defined(OPTIMIZER_ENABLED)
		sampler2D _TokenEmissionDelayMap0;
	#endif
	float4 _TokenEmissionDelayMap0_ST;
	float2 _TokenEmissionDelayMapPan0;
	float _TokenEmissionDelayMapUV0;
	float _TokenEmissionDelayMapInvert0; 

	float _TokenEmissionAudioLinkEnabled0;
	float _TokenEmissionALBand0;

	float4 _TokenEmissionColor0;
	float _TokenEmissionColorThemeIndex0;

	float _TokenEmissionEnableColorShift0;

	#if defined(PROP_TOKENEMISSIONCOLORSHIFTMAP0) || !defined(OPTIMIZER_ENABLED)
		sampler2D _TokenEmissionColorShiftMap0;
	#endif
	float4 _TokenEmissionColorShiftMap0_ST;
	float2 _TokenEmissionColorShiftMapPan0;
	float _TokenEmissionColorShiftMapUV0;

	#if defined(PROP_TOKENEMISSIONCOLORSHIFTGRADIENT0) || !defined(OPTIMIZER_ENABLED)
		sampler2D _TokenEmissionColorShiftGradient0;
	#endif
	float4 _TokenEmissionColorShiftGradient0_ST;
	float2 _TokenEmissionColorShiftGradientPan0;
	float _TokenEmissionColorShiftGradientUV0;

#endif
#endif

#T#TokenEmissionFunctions
#ifdef _TOKEN_EMISSION
	float tokenEmissionCalculateGlowInTheDark(in float minLight, in float maxLight, in float minEmissionMultiplier, in float maxEmissionMultiplier, in float enabled, in float worldOrMesh, in PoiLight poiLight)
	{
		float glowInTheDarkMultiplier = 1;
		//UNITY_BRANCH
		if (enabled)
		{
			float3 lightValue = worldOrMesh ? calculateluminance(poiLight.finalLighting.rgb) : calculateluminance(poiLight.directColor.rgb);
			float gitdeAlpha = saturate(inverseLerp(minLight, maxLight, lightValue));
			glowInTheDarkMultiplier = lerp(minEmissionMultiplier, maxEmissionMultiplier, gitdeAlpha);
		}
		return glowInTheDarkMultiplier;
	}

#ifdef _TOKEN_EMISSION0
	float3 applyTokenEmission0(inout PoiFragData poiFragData, in PoiMesh poiMesh, in PoiLight poiLight, in PoiCam poiCam, in PoiMods poiMods)
	{
		float3 emission = 0;
		float emissionStrength = _TokenEmissionStrength0;
		int band = _TokenEmissionALBand0;
  
		float2 uv_DelayMap = poiMesh.uv[0].xy * _TokenEmissionDelayMap0_ST.xy + _TokenEmissionDelayMap0_ST.zw;
		float delay = 0;
		if (_TokenEmissionDelayMapInvert0) {
			delay = min(( 1 - (tex2D(_TokenEmissionDelayMap0, uv_DelayMap)).r) * ( 128.0 ) , 127.999 );
		} else {
			delay = min( (tex2D(_TokenEmissionDelayMap0, uv_DelayMap)).r * ( 128.0 ) , 127.999 );
		}
		
		// brightness source
		float brightness = AudioLinkData(float2(delay, band)) * poiMods.audioLinkAvailable * _TokenEmissionAudioLinkEnabled0;
		
		// color source
		float3 color = float3(0.0, 0.0, 0.0);

		// color shift
		if (_TokenEmissionEnableColorShift0) {
			float2 uv_colorShift = poiMesh.uv[0].xy * _TokenEmissionColorShiftMap0_ST.xy + _TokenEmissionColorShiftMap0_ST.zw;
			float gradientPos = tex2D(_TokenEmissionColorShiftMap0, uv_colorShift);
			float4 gradientColor = tex2D(_TokenEmissionColorShiftGradient0, float2(gradientPos, 0));

			color = gradientColor;
		} else {
			// color = HSVtoRGB(float3(_TokenEmissionSelectedColor0, 1.0, 1.0));
			color = poiThemeColor(poiMods, _TokenEmissionColor0, _TokenEmissionColorThemeIndex0);
		}

		float2 uv_EmissionMask = poiMesh.uv[0].xy * _TokenEmissionMask0_ST.xy + _TokenEmissionMask0_ST.zw;
		

		float4 maskedEmission = 0;
		if (_TokenEmissionMaskInvert0) {
			maskedEmission = lerp(float4(0.0,0.0,0.0,0.0), brightness, 1-tex2D(_TokenEmissionMask0, uv_EmissionMask));
		} else { 
			maskedEmission = lerp(float4(0.0,0.0,0.0,0.0), brightness, tex2D(_TokenEmissionMask0, uv_EmissionMask));
		}

		emissionStrength = min (emissionStrength, 2.0);
		emission = max(emissionStrength * color * maskedEmission, 0);

		poiFragData.emission += emission;

		return emission;
	}
#endif
#endif

#T#TokenEmissionFunctionCalls
#ifdef _TOKEN_EMISSION
	float3 tokenEmissionBaseReplace = 0;
	#ifdef _TOKEN_EMISSION0
	tokenEmissionBaseReplace += applyTokenEmission0(poiFragData, poiMesh, poiLight, poiCam, poiMods);
	#endif
	poiFragData.finalColor.rgb = lerp(poiFragData.finalColor.rgb, saturate(tokenEmissionBaseReplace), poiMax(tokenEmissionBaseReplace));
#endif

